// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  role      UserRole @default(ADMIN)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  lastLoginAt DateTime? @map("last_login_at") @db.Timestamptz

  // Profile information
  profile UserProfile?

  // Relationships
  products Product[]
  categories Category[]
  campaigns Campaign[]
  content Content[]
  notificationLogs NotificationLog[]
  webhooks Webhook[]
  
  @@map("users")
}

model UserProfile {
  id        String @id @default(uuid()) @db.Uuid
  userId    String @unique @map("user_id") @db.Uuid
  firstName String? @map("first_name")
  lastName  String? @map("last_name")
  avatar    String?
  timezone  String @default("UTC")
  
  // Preferences
  theme     Theme @default(SYSTEM)
  language  String @default("en")
  
  // Notification settings
  emailNotifications EmailNotificationSettings?
  pushNotifications  PushNotificationSettings?
  
  // Push notification subscription
  pushSubscription   PushSubscription?
  
  // Price alerts
  priceAlerts        PriceAlert[]
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_profiles")
}

model EmailNotificationSettings {
  id              String @id @default(uuid()) @db.Uuid
  userProfileId   String @unique @map("user_profile_id") @db.Uuid
  newConversions  Boolean @default(true) @map("new_conversions")
  weeklyReports   Boolean @default(true) @map("weekly_reports")
  systemUpdates   Boolean @default(true) @map("system_updates")
  
  userProfile UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  
  @@map("email_notification_settings")
}

model PushNotificationSettings {
  id              String @id @default(uuid()) @db.Uuid
  userProfileId   String @unique @map("user_profile_id") @db.Uuid
  realTimeAlerts  Boolean @default(false) @map("real_time_alerts")
  dailySummary    Boolean @default(true) @map("daily_summary")
  
  userProfile UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  
  @@map("push_notification_settings")
}

// Product Management
model Category {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  slug        String  @unique
  description String?
  icon        String?
  parentId    String? @map("parent_id") @db.Uuid
  order       Int     @default(0)
  isActive    Boolean @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz
  createdBy   String  @map("created_by") @db.Uuid

  // Self-referential relationship for hierarchical categories
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  
  // Relationships
  products    Product[]
  creator     User @relation(fields: [createdBy], references: [id])
  marketTrends MarketTrend[]
  
  @@map("categories")
}

model Tag {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique
  slug      String   @unique
  color     String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  
  // Many-to-many relationship with products
  products  ProductTag[]
  
  @@map("tags")
}

model Product {
  id               String        @id @default(uuid()) @db.Uuid
  title            String
  description      String
  shortDescription String?       @map("short_description")
  
  // Pricing
  currentPrice     Decimal       @map("current_price") @db.Decimal(10,2)
  originalPrice    Decimal?      @map("original_price") @db.Decimal(10,2)
  currency         String        @default("USD")
  
  // SEO
  metaTitle        String?       @map("meta_title")
  metaDescription  String?       @map("meta_description")
  slug             String        @unique
  
  // Status and visibility
  status           ProductStatus @default(DRAFT)
  isActive         Boolean       @default(true) @map("is_active")
  
  // Timestamps
  createdAt        DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime      @updatedAt @map("updated_at") @db.Timestamptz
  publishedAt      DateTime?     @map("published_at") @db.Timestamptz
  
  // Foreign keys
  categoryId       String        @map("category_id") @db.Uuid
  createdBy        String        @map("created_by") @db.Uuid
  
  // Relationships
  category         Category      @relation(fields: [categoryId], references: [id])
  creator          User          @relation(fields: [createdBy], references: [id])
  images           ProductImage[]
  affiliateLinks   AffiliateLink[]
  tags             ProductTag[]
  analytics        ProductAnalytics?
  priceAlerts      PriceAlert[]
  competitorProducts CompetitorProduct[]
  
  @@map("products")
}

model ProductImage {
  id        String  @id @default(uuid()) @db.Uuid
  productId String  @map("product_id") @db.Uuid
  url       String
  alt       String
  isPrimary Boolean @default(false) @map("is_primary")
  order     Int     @default(0)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_images")
}

model ProductTag {
  productId String @map("product_id") @db.Uuid
  tagId     String @map("tag_id") @db.Uuid
  
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([productId, tagId])
  @@map("product_tags")
}

// Affiliate Link Management
model Platform {
  id            String @id @default(uuid()) @db.Uuid
  name          String @unique
  displayName   String @map("display_name")
  baseUrl       String @map("base_url")
  logoUrl       String? @map("logo_url")
  isActive      Boolean @default(true) @map("is_active")
  
  affiliateLinks AffiliateLink[]
  
  @@map("platforms")
}

model AffiliateLink {
  id           String   @id @default(uuid()) @db.Uuid
  productId    String   @map("product_id") @db.Uuid
  platformId   String   @map("platform_id") @db.Uuid
  originalUrl  String   @map("original_url")
  shortenedUrl String?  @map("shortened_url")
  commission   Decimal  @db.Decimal(5,4) @default(0.0000)
  isActive     Boolean  @default(true) @map("is_active")
  priority     Int      @default(0)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relationships
  product      Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  platform     Platform    @relation(fields: [platformId], references: [id])
  analytics    LinkAnalytics?
  clicks       ClickEvent[]
  conversions  ConversionEvent[]
  
  @@map("affiliate_links")
}

// Analytics and Tracking
model LinkAnalytics {
  id              String @id @default(uuid()) @db.Uuid
  linkId          String @unique @map("link_id") @db.Uuid
  totalClicks     Int    @default(0) @map("total_clicks")
  totalConversions Int   @default(0) @map("total_conversions")
  totalRevenue    Decimal @default(0) @map("total_revenue") @db.Decimal(10,2)
  conversionRate  Decimal @default(0) @map("conversion_rate") @db.Decimal(5,4)
  averageOrderValue Decimal @default(0) @map("average_order_value") @db.Decimal(10,2)
  lastUpdated     DateTime @updatedAt @map("last_updated") @db.Timestamptz
  
  affiliateLink   AffiliateLink @relation(fields: [linkId], references: [id], onDelete: Cascade)
  
  @@map("link_analytics")
}

model ProductAnalytics {
  id              String @id @default(uuid()) @db.Uuid
  productId       String @unique @map("product_id") @db.Uuid
  views           Int    @default(0)
  clicks          Int    @default(0)
  conversions     Int    @default(0)
  revenue         Decimal @default(0) @db.Decimal(10,2)
  lastUpdated     DateTime @updatedAt @map("last_updated") @db.Timestamptz
  
  product         Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_analytics")
}

model ClickEvent {
  id            String   @id @default(uuid()) @db.Uuid
  linkId        String   @map("link_id") @db.Uuid
  sessionId     String   @map("session_id")
  ipAddress     String?  @map("ip_address")
  userAgent     String?  @map("user_agent")
  referrer      String?
  country       String?
  city          String?
  device        String?
  browser       String?
  os            String?
  timestamp     DateTime @default(now()) @db.Timestamptz
  
  affiliateLink AffiliateLink @relation(fields: [linkId], references: [id], onDelete: Cascade)
  conversion    ConversionEvent?
  
  @@index([linkId, timestamp])
  @@map("click_events")
}

model ConversionEvent {
  id            String   @id @default(uuid()) @db.Uuid
  linkId        String   @map("link_id") @db.Uuid
  clickId       String?  @unique @map("click_id") @db.Uuid
  orderValue    Decimal  @map("order_value") @db.Decimal(10,2)
  commission    Decimal  @db.Decimal(10,2)
  currency      String   @default("USD")
  status        ConversionStatus @default(PENDING)
  orderId       String?  @map("order_id")
  productIds    String[] @map("product_ids")
  timestamp     DateTime @default(now()) @db.Timestamptz
  
  affiliateLink AffiliateLink @relation(fields: [linkId], references: [id], onDelete: Cascade)
  click         ClickEvent?   @relation(fields: [clickId], references: [id])
  
  @@index([linkId, timestamp])
  @@map("conversion_events")
}

// Campaign Management
model Campaign {
  id            String    @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  startDate     DateTime  @map("start_date") @db.Timestamptz
  endDate       DateTime? @map("end_date") @db.Timestamptz
  budget        Decimal?  @db.Decimal(10,2)
  targetRevenue Decimal?  @map("target_revenue") @db.Decimal(10,2)
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  createdBy     String    @map("created_by") @db.Uuid
  
  creator       User      @relation(fields: [createdBy], references: [id])
  
  @@map("campaigns")
}

// Enums
enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
  SCHEDULED
}

enum ConversionStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

// SEO and Redirect Management
model Redirect {
  id         String   @id @default(uuid()) @db.Uuid
  fromPath   String   @unique @map("from_path")
  toPath     String   @map("to_path")
  statusCode Int      @map("status_code") @default(301)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz
  
  @@map("redirects")
}

model Content {
  id              String        @id @default(uuid()) @db.Uuid
  title           String
  slug            String        @unique
  content         String
  excerpt         String?
  type            ContentType   @default(ARTICLE)
  status          ContentStatus @default(DRAFT)
  
  // SEO
  metaTitle       String?       @map("meta_title")
  metaDescription String?       @map("meta_description")
  keywords        String[]
  
  // Publishing
  publishedAt     DateTime?     @map("published_at") @db.Timestamptz
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime      @updatedAt @map("updated_at") @db.Timestamptz
  
  // Author
  authorId        String        @map("author_id") @db.Uuid
  author          User          @relation(fields: [authorId], references: [id])
  
  @@map("content")
}

enum ContentType {
  ARTICLE
  REVIEW
  COMPARISON
  BUYING_GUIDE
  PAGE
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
// Push Notification Management
model PushSubscription {
  id            String   @id @default(uuid()) @db.Uuid
  userProfileId String   @unique @map("user_profile_id") @db.Uuid
  endpoint      String
  p256dhKey     String   @map("p256dh_key")
  authKey       String   @map("auth_key")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz
  
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  
  @@map("push_subscriptions")
}

model NotificationLog {
  id               String   @id @default(uuid()) @db.Uuid
  type             String   // 'push', 'email', 'sms'
  title            String
  body             String
  recipientsCount  Int      @default(0) @map("recipients_count")
  successfulCount  Int      @default(0) @map("successful_count")
  failedCount      Int      @default(0) @map("failed_count")
  sentBy           String?  @map("sent_by") @db.Uuid
  sentAt           DateTime @default(now()) @map("sent_at") @db.Timestamptz
  
  sender           User?    @relation(fields: [sentBy], references: [id])
  
  @@map("notification_logs")
}

// Price Alert Management
model PriceAlert {
  id            String    @id @default(uuid()) @db.Uuid
  userProfileId String    @map("user_profile_id") @db.Uuid
  productId     String    @map("product_id") @db.Uuid
  targetPrice   Decimal   @map("target_price") @db.Decimal(10,2)
  currentPrice  Decimal   @map("current_price") @db.Decimal(10,2)
  isActive      Boolean   @default(true) @map("is_active")
  triggeredAt   DateTime? @map("triggered_at") @db.Timestamptz
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  logs          PriceAlertLog[]
  
  @@unique([userProfileId, productId])
  @@map("price_alerts")
}

model PriceAlertLog {
  id             String    @id @default(uuid()) @db.Uuid
  priceAlertId   String    @map("price_alert_id") @db.Uuid
  triggeredPrice Decimal   @map("triggered_price") @db.Decimal(10,2)
  targetPrice    Decimal   @map("target_price") @db.Decimal(10,2)
  triggeredAt    DateTime  @default(now()) @map("triggered_at") @db.Timestamptz
  
  priceAlert     PriceAlert @relation(fields: [priceAlertId], references: [id], onDelete: Cascade)
  
  @@map("price_alert_logs")
}

// Competitor Analysis and Market Intelligence
model Competitor {
  id            String   @id @default(uuid()) @db.Uuid
  name          String
  domain        String   @unique
  description   String?
  logoUrl       String?  @map("logo_url")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relationships
  products      CompetitorProduct[]
  analytics     CompetitorAnalytics?
  priceHistory  CompetitorPriceHistory[]
  
  @@map("competitors")
}

model CompetitorProduct {
  id            String   @id @default(uuid()) @db.Uuid
  competitorId  String   @map("competitor_id") @db.Uuid
  productId     String?  @map("product_id") @db.Uuid // Link to our product if matched
  name          String
  url           String
  currentPrice  Decimal  @map("current_price") @db.Decimal(10,2)
  originalPrice Decimal? @map("original_price") @db.Decimal(10,2)
  currency      String   @default("USD")
  availability  CompetitorProductAvailability @default(IN_STOCK)
  rating        Decimal? @db.Decimal(3,2)
  reviewCount   Int?     @map("review_count")
  imageUrl      String?  @map("image_url")
  description   String?
  features      String[] // JSON array of features
  lastChecked   DateTime @map("last_checked") @db.Timestamptz
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relationships
  competitor    Competitor @relation(fields: [competitorId], references: [id], onDelete: Cascade)
  product       Product?   @relation(fields: [productId], references: [id])
  priceHistory  CompetitorPriceHistory[]
  
  @@unique([competitorId, url])
  @@map("competitor_products")
}

model CompetitorPriceHistory {
  id                  String   @id @default(uuid()) @db.Uuid
  competitorId        String   @map("competitor_id") @db.Uuid
  competitorProductId String   @map("competitor_product_id") @db.Uuid
  price               Decimal  @db.Decimal(10,2)
  originalPrice       Decimal? @map("original_price") @db.Decimal(10,2)
  currency            String   @default("USD")
  availability        CompetitorProductAvailability @default(IN_STOCK)
  recordedAt          DateTime @default(now()) @map("recorded_at") @db.Timestamptz
  
  // Relationships
  competitor          Competitor        @relation(fields: [competitorId], references: [id], onDelete: Cascade)
  competitorProduct   CompetitorProduct @relation(fields: [competitorProductId], references: [id], onDelete: Cascade)
  
  @@index([competitorProductId, recordedAt])
  @@map("competitor_price_history")
}

model CompetitorAnalytics {
  id                    String   @id @default(uuid()) @db.Uuid
  competitorId          String   @unique @map("competitor_id") @db.Uuid
  totalProducts         Int      @default(0) @map("total_products")
  averagePrice          Decimal  @default(0) @map("average_price") @db.Decimal(10,2)
  priceRange            Json     @map("price_range") // {min: number, max: number}
  marketShare           Decimal  @default(0) @map("market_share") @db.Decimal(5,4)
  competitiveAdvantage  String[] @map("competitive_advantage")
  weaknesses            String[]
  lastAnalyzed          DateTime @map("last_analyzed") @db.Timestamptz
  createdAt             DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt             DateTime @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relationships
  competitor            Competitor @relation(fields: [competitorId], references: [id], onDelete: Cascade)
  
  @@map("competitor_analytics")
}

model MarketTrend {
  id            String     @id @default(uuid()) @db.Uuid
  categoryId    String?    @map("category_id") @db.Uuid
  trendType     TrendType  @map("trend_type")
  title         String
  description   String
  impact        TrendImpact
  confidence    Decimal    @db.Decimal(3,2) // 0.00 to 1.00
  dataPoints    Json       // Array of {date, value, metadata}
  insights      String[]   // Key insights from the trend
  recommendations String[] // Actionable recommendations
  startDate     DateTime   @map("start_date") @db.Timestamptz
  endDate       DateTime?  @map("end_date") @db.Timestamptz
  isActive      Boolean    @default(true) @map("is_active")
  createdAt     DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime   @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relationships
  category      Category?  @relation(fields: [categoryId], references: [id])
  
  @@index([categoryId, trendType])
  @@map("market_trends")
}

model CompetitiveIntelligence {
  id                String   @id @default(uuid()) @db.Uuid
  title             String
  summary           String
  analysisType      AnalysisType @map("analysis_type")
  keyFindings       String[] @map("key_findings")
  opportunities     String[]
  threats           String[]
  recommendations   String[]
  dataSource        String   @map("data_source")
  confidenceLevel   Decimal  @map("confidence_level") @db.Decimal(3,2)
  impactScore       Int      @map("impact_score") // 1-10 scale
  priority          Priority @default(MEDIUM)
  status            IntelligenceStatus @default(ACTIVE)
  validUntil        DateTime? @map("valid_until") @db.Timestamptz
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime @updatedAt @map("updated_at") @db.Timestamptz
  
  @@index([analysisType, priority])
  @@map("competitive_intelligence")
}

// Additional enums for competitor analysis
enum CompetitorProductAvailability {
  IN_STOCK
  OUT_OF_STOCK
  LIMITED_STOCK
  DISCONTINUED
  UNKNOWN
}

enum TrendType {
  PRICE
  DEMAND
  MARKET_SHARE
  SEASONAL
  COMPETITIVE
  TECHNOLOGY
  CONSUMER_BEHAVIOR
}

enum TrendImpact {
  HIGH
  MEDIUM
  LOW
}

enum AnalysisType {
  PRICE_ANALYSIS
  MARKET_POSITIONING
  FEATURE_COMPARISON
  CUSTOMER_SENTIMENT
  MARKET_OPPORTUNITY
  COMPETITIVE_LANDSCAPE
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum IntelligenceStatus {
  ACTIVE
  ARCHIVED
  UNDER_REVIEW
}

// Webhook System
model Webhook {
  id            String        @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  url           String
  secret        String?       // For webhook signature verification
  events        WebhookEvent[] @map("events")
  isActive      Boolean       @default(true) @map("is_active")
  retryAttempts Int           @default(3) @map("retry_attempts")
  timeout       Int           @default(30) // seconds
  headers       Json?         // Custom headers as JSON object
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime      @updatedAt @map("updated_at") @db.Timestamptz
  createdBy     String        @map("created_by") @db.Uuid
  
  // Relationships
  creator       User          @relation(fields: [createdBy], references: [id])
  deliveries    WebhookDelivery[]
  
  @@map("webhooks")
}

model WebhookDelivery {
  id            String              @id @default(uuid()) @db.Uuid
  webhookId     String              @map("webhook_id") @db.Uuid
  event         WebhookEvent
  payload       Json
  httpStatus    Int?                @map("http_status")
  responseBody  String?             @map("response_body")
  responseTime  Int?                @map("response_time") // milliseconds
  attempt       Int                 @default(1)
  status        WebhookDeliveryStatus @default(PENDING)
  errorMessage  String?             @map("error_message")
  deliveredAt   DateTime?           @map("delivered_at") @db.Timestamptz
  createdAt     DateTime            @default(now()) @map("created_at") @db.Timestamptz
  nextRetryAt   DateTime?           @map("next_retry_at") @db.Timestamptz
  
  // Relationships
  webhook       Webhook             @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  
  @@index([webhookId, createdAt])
  @@index([status, nextRetryAt])
  @@map("webhook_deliveries")
}

enum WebhookEvent {
  PRODUCT_CREATED
  PRODUCT_UPDATED
  PRODUCT_DELETED
  PRODUCT_STATUS_CHANGED
  LINK_CLICKED
  CONVERSION_TRACKED
  USER_REGISTERED
  USER_UPDATED
  CAMPAIGN_STARTED
  CAMPAIGN_ENDED
  PRICE_ALERT_TRIGGERED
  ANALYTICS_MILESTONE
}

enum WebhookDeliveryStatus {
  PENDING
  SUCCESS
  FAILED
  RETRYING
}